import streamlit as st
import random
import time
import os
import numpy as np
from PIL import Image, ImageDraw, Image as _PILImage
import io
import datetime
from fpdf import FPDF
import json
import math

# --- Bezpeƒçn√© spou≈°tƒõn√≠ Pythonu pro IT ---
import ast
import contextlib
from io import StringIO

def is_code_safe(src: str) -> bool:
    try:
        tree = ast.parse(src, mode="exec")
    except SyntaxError:
        return False
    for node in ast.walk(tree):
        if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Try, ast.Raise)):
            return False
        if isinstance(node, ast.Call) and isinstance(node.func, ast.Name) and node.func.id in {"exec", "eval", "open", "__import__"}:
            return False
        if isinstance(node, ast.Attribute) and isinstance(node.attr, str) and node.attr.startswith("__"):
            return False
    return True

def run_user_code_capture_stdout(src: str):
    if not is_code_safe(src):
        return False, "K√≥d nen√≠ povolen (import/exec/eval/with/try/open/__import__/__dunder__ zak√°z√°no)."
    fake_out = StringIO()
    safe_builtins = {
        "print": print,
        "range": range,
        "len": len,
        "abs": abs,
        "round": round
    }
    env = {"__builtins__": safe_builtins}
    try:
        with contextlib.redirect_stdout(fake_out):
            exec(src, env, env)
    except Exception as e:
        return False, f"Chyba: {e}"
    return True, fake_out.getvalue().strip()

# -----------------------
# Pomocn√© utility (MA validace/parsov√°n√≠)
# -----------------------
def normalize_decimal(s: str):
    s = (s or "").strip().replace(" ", "").replace(",", ".")
    if s == "":
        raise ValueError("empty")
    return float(s)

def parse_fraction(s: str):
    if "/" not in s:
        raise ValueError("not a fraction")
    parts = s.replace(" ", "").split("/")
    if len(parts) != 2:
        raise ValueError("bad fraction")
    a = int(parts[0]); b = int(parts[1])
    if b == 0:
        raise ValueError("zero denom")
    return a, b

def gcd(a, b): return math.gcd(a, b)

def reduce_fraction(a, b):
    g = gcd(abs(a), abs(b))
    a //= g; b //= g
    if b < 0:
        a, b = -a, -b
    return a, b

def fraction_equal_reduced(user_str, target_str):
    ua, ub = parse_fraction(user_str)
    ra, rb = reduce_fraction(ua, ub)
    ta, tb = parse_fraction(target_str)
    ta, tb = reduce_fraction(ta, tb)
    # u≈æivatel MUS√ç m√≠t ji≈æ zkr√°ceno:
    return (ra == ta and rb == tb and (ua, ub) == (ra, rb))

def parse_div_remainder(s: str):
    ss = s.strip().lower().replace(" ", "")
    if "zb." not in ss:
        raise ValueError("missing 'zb.'")
    parts = ss.split("zb.")
    if len(parts) != 2:
        raise ValueError("bad format")
    q = int(parts[0]); r = int(parts[1])
    return q, r

def parse_ratio(s: str):
    ss = s.replace(" ", "")
    if ":" not in ss:
        raise ValueError("missing ':'")
    a, b = ss.split(":")
    a, b = int(a), int(b)
    return reduce_fraction(a, b)

def approx_equal(a: float, b: float, tol=1e-2):
    return abs(a - b) <= tol

# ---------------
# Poh√°dky (struƒçn√Ω obsah)
# ---------------
fairytales_data = {
    "Dr√°ƒçek z mechov√©ho lesa": {
        "text": "V Mechov√©m lese bydlel dr√°ƒçek ≈†imonek. S v√≠lou Kl√°rkou znaƒçili kroky kam√≠nky a objevovali rytmus a melodii slov. V m√≠stech, kde mechy byly mƒõkk√© jako pol≈°t√°≈ôe a paprsky slunce tanƒçily mezi vƒõtvemi, se sch√°zeli. Dr√°ƒçek ≈†imonek nebyl ≈æ√°dn√Ω dƒõsiv√Ω drak ‚Äì byl cel√Ω zelen√Ω, mƒõl kulat√© b≈ô√≠≈°ko, t≈ôepotav√° k≈ôid√©lka a sm√°l se, a≈æ se mu od pusy m√≠sto ohnƒõ valily bubliny! Ka≈æd√Ω den l√©tal n√≠zko nad zem√≠ a poƒç√≠tal, kolik hub vyrostlo, kolik pt√°ƒçk≈Ø zp√≠v√° a kolik mravenc≈Ø si stav√≠ cestu. Bavilo ho to ‚Äì byl toti≈æ moc zvƒõdav√Ω. Jednoho dne ale pr≈°elo tak silnƒõ, ≈æe se v≈°echny cestiƒçky v lese roztekly. Dr√°ƒçek nevƒõdƒõl, kudy dom≈Ø. Sedl si pod kapradinu a smutnƒõ foukal bublinky. V tu chv√≠li kolem ≈°la v√≠la Kl√°rka. ‚Äû≈†imonku, proƒç jsi smutn√Ω?‚Äú zeptala se. ‚ÄûZtratil jsem se! Neum√≠m spoƒç√≠tat, kolik krok≈Ø vede k moj√≠ jeskyni,‚Äú povzdychl si dr√°ƒçek. ‚ÄûTo nevad√≠,‚Äú usm√°la se v√≠la. ‚ÄûSpoƒç√≠t√°me to spolu! Ka≈æd√Ωch deset krok≈Ø oznaƒç√≠me kam√≠nkem.‚Äú A tak ≈°li. Po ka≈æd√Ωch deseti kroc√≠ch polo≈æili kam√≠nek. Po dvaceti kroc√≠ch ‚Äì dva kam√≠nky. Po t≈ôiceti ‚Äì t≈ôi. A h√°dejte co? Kdy≈æ polo≈æili ≈°est√Ω kam√≠nek, dr√°ƒçek vyk≈ôikl radost√≠: ‚ÄûTo je moje jeskynƒõ!‚Äú Od t√© doby ≈†imonek v≈ædy, kdy≈æ pr≈°√≠, pom√°h√° ostatn√≠m zv√≠≈ô√°tk≈Øm v lese naj√≠t cestu pomoc√≠ poƒç√≠t√°n√≠ krok≈Ø a kam√≠nk≈Ø. A v√≠te co? U≈æ se nikdy neztratil. Nauƒçil se, ≈æe poƒç√≠t√°n√≠ m≈Ø≈æe zachr√°nit den.",
        "moral": "Nauƒçme se pro≈æ√≠vat ‚Äì nejen ƒç√≠sla, ale i cestu k p≈ô√°telstv√≠.",
        "obrazek_path": "dracek.png"
    },
    "O ≈†√≠pkov√© R≈Ø≈æence": {
        "text": "Trny bludi≈°tƒõ i vzory ≈ôeƒçi: velk√© p√≠smeno, teƒçka, slabiky. Matƒõj trpƒõlivost√≠ probudil kr√°lovstv√≠. Jak to bylo od zaƒç√°tku? Kdysi d√°vno se v kr√°lovstv√≠ narodila mal√° princezna R≈Ø≈æenka. Kr√°l s kr√°lovnou uspo≈ô√°dali velkou oslavu a pozvali v√≠ly z cel√©ho svƒõta. Ka≈æd√° v√≠la p≈ôinesla princeznƒõ dar ‚Äì kr√°su, zpƒõv, radost‚Ä¶ Ale jedna v√≠la nebyla pozvan√°. A proto≈æe se urazila, p≈ôi≈°la nepozv√°na a zvolala: ‚ÄûA≈æ j√≠ bude ≈°estn√°ct, p√≠chne se o trn a usne na sto let!‚Äú V≈°ichni se polekali. Jedna hodn√° v√≠la ale ≈ôekla: ‚ÄûNebude to nav≈ædy ‚Äì a≈æ ji nƒõkdo s ƒçist√Ωm srdcem najde, probud√≠ se.‚Äú Kr√°l dal sp√°lit v≈°echny trny v kr√°lovstv√≠. Ale jeden z≈Østal schovan√Ω ‚Äì v koutƒõ star√© vƒõ≈æe. A tak kdy≈æ bylo R≈Ø≈æence pr√°vƒõ ≈°estn√°ct let, ≈°la se proj√≠t po z√°mku. Objevila schody, po kter√Ωch nikdy ne≈°la‚Ä¶ a v prachu vƒõ≈æe objevila star√Ω kolovr√°tek. P√≠chla se ‚Äì a v tu r√°nu usnula. Usnulo i cel√© kr√°lovstv√≠. Stromy narostly, trny prorostly z√°mek. Les spal. Sto let‚Ä¶ A≈æ jednoho dne p≈ôi≈°el mlad√Ω kluk jm√©nem Matƒõj. Byl zvƒõdav√Ω a odv√°≈æn√Ω. Kdy≈æ vidƒõl, ≈æe trny tvo≈ô√≠ bludi≈°tƒõ, zaƒçal poƒç√≠tat, kudy se dostane d√°l. Poƒç√≠tal kroky, hledal vzory, skl√°dal cesty. A≈æ do≈°el ke dve≈ô√≠m‚Ä¶ Uvnit≈ô uvidƒõl d√≠vku, kter√° spala jako andƒõl. Matƒõj ji ti≈°e oslovil: ‚ÄûJsi R≈Ø≈æenka? J√° jsem Matƒõj. P≈ôinesl jsem ti svƒõtlo dne≈°n√≠ho dne.‚Äú V tu chv√≠li se R≈Ø≈æenka probudila. Les se prosv√≠til. Trny se promƒõnily v kvƒõty.         A co d√°l? Matƒõj s R≈Ø≈æenkou se stali p≈ô√°teli ‚Äì a ka≈æd√Ω den poƒç√≠tali kvƒõtiny, pt√°ky i roky, kter√© u≈æ nesp√≠.",
        "moral": "Trpƒõlivost a pozorn√© ƒçten√≠ probouz√≠ v√Ωznam.",
        "obrazek_path": "ruzenka.png"
    },
    "Popelka": {
        "text": "Jednou byla d√≠vka, kter√° t≈ô√≠dila fazole a slova; na plese vn√≠mala hudbu i ≈ôeƒç ‚Äì mƒõkk√© a tvrd√© souhl√°sky. V jedn√© dalek√© zemi ≈æila d√≠vka jm√©nem Popelka. Jej√≠ jm√©no vzniklo podle popela, kter√Ω dennƒõ vymetala z krbu. I kdy≈æ ≈æila v tƒõ≈æk√Ωch podm√≠nk√°ch ‚Äì jej√≠ nevlastn√≠ matka a dvƒõ sestry j√≠ st√°le porouƒçely ‚Äì Popelka byla chytr√°, trpƒõliv√° a mƒõla dobr√© srdce. Kdy≈æ mƒõla chvilku klidu, hr√°la si Popelka s kam√≠nky a fazolemi. Nejen≈æe z nich skl√°dala obrazce, ale tak√© poƒç√≠tala ‚Äì sƒç√≠tala je, ≈ôadila podle velikosti, t≈ô√≠dila podle barvy. Matematika j√≠ pom√°hala zapomenout na starosti. Jednou veƒçer p≈ôi≈°el do vsi kr√°lovsk√Ω posel a rozhl√°sil: ‚ÄûPrinc po≈ô√°d√° velk√Ω b√°l! Vybere si nevƒõstu. Ka≈æd√° d√≠vka je zv√°na!‚Äú Sestry se zaƒçaly chystat ‚Äì poƒç√≠taly ≈°aty, boty a ≈°perky: ‚ÄûJ√° m√°m 5 n√°u≈°nic, ty m√°≈° 2... to je 7! Pot≈ôebujeme je≈°tƒõ 3 do deseti!‚Äú Popelka ti≈°e doufala, ≈æe p≈Øjde taky. Ale macecha j√≠ jen ≈ôekla: ‚ÄûTy nikam nejde≈°, nem√°≈° co na sebe ‚Äì a nejd≈ô√≠v rozt≈ôiƒè 3 hrnce hrachu a ƒçoƒçky!‚Äú Popelka si sedla a zoufala si ‚Äì ale vtom se objevil b√≠l√Ω pt√°ƒçek. ‚ÄûPomohu ti. Ale mus√≠≈° pomoci i ty mnƒõ ‚Äì spoƒç√≠tej, kolik je 3x7.‚Äú ‚ÄûTo je dvacet jedna,‚Äú ≈ôekla Popelka. Ptaƒç√≠ pomocn√≠ci zam√°vali k≈ô√≠dly a v≈°echna zrnka rozt≈ô√≠dili. A vtom ‚Äì zablesklo se. Na dvo≈ôe st√°la v√≠la. ‚ÄûZaslou≈æ√≠≈° si j√≠t na ples. Pomohla jsi ostatn√≠m a um√≠≈° poƒç√≠tat!‚Äú M√°vla h≈Ølkou ‚Äì Popelka mƒõla ≈°aty poset√© hvƒõzdami, sklenƒõn√© st≈ôev√≠ƒçky a koƒç√°r z d√Ωnƒõ. ‚ÄûAle pamatuj ‚Äì o p≈Ølnoci v≈°e zmiz√≠!‚Äú Na plese Popelka okouzlila prince. Tancovali spolu a sm√°li se. Princ j√≠ ≈ôekl: ‚ÄûChci d√≠vku, kter√° m√° nejen kr√°sn√© oƒçi, ale i bystr√Ω rozum. Polo≈æ√≠m ti h√°danku: Kdy≈æ dnes m√°me 12 host≈Ø, z√≠tra p≈ôijde o 5 v√≠c, kolik jich bude celkem?‚Äú ‚ÄûSedmn√°ct!‚Äú usm√°la se Popelka. Princ byl ohromen. Ale hodiny odbily dvan√°ct, Popelka utekla‚Ä¶ a ztratila jeden st≈ôev√≠ƒçek. Druh√Ω den princ obj√≠≈ædƒõl cel√© kr√°lovstv√≠ a zkou≈°el sklenƒõn√Ω st≈ôev√≠ƒçek d√≠vce po d√≠vce. V ka≈æd√©m domƒõ se zastavil, spoƒç√≠tal d√≠vky a zapsal si, kolik pokus≈Ø u≈æ udƒõlal. A≈æ nakonec dorazil do posledn√≠ho domu ‚Äì kde na≈°el tu pravou. St≈ôev√≠ƒçek padl ‚Äì a Popelka i princ vƒõdƒõli, ≈æe jejich ≈æivoty se pr√°vƒõ zmƒõnily.",
        "moral": "Kr√°sa bez rozumu nevydr≈æ√≠ ‚Äì ale rozum a laskavost z√°≈ô√≠ nav≈ædy. Ten, kdo poƒç√≠t√°, t≈ô√≠d√≠, uƒç√≠ se a pom√°h√° ostatn√≠m, nakonec najde cestu i ze smutku.",
        "obrazek_path": "popelka.png"
    },
    "Poƒç√≠t√°n√≠ s lesn√≠ v√≠lou Kl√°rkou": {
        "text": "V hlubok√©m zelen√©m lese, kde slunce jemnƒõ prosv√≠t√° mezi listy, ≈æila mal√° v√≠la jm√©nem Kl√°rka. Ka≈æd√© r√°no si obl√©kla svou r≈Ø≈æovou kvƒõtinovou suk√Ωnku a vyletƒõla ze sv√© ≈°i≈°kov√© chaloupky. V√≠la Kl√°rka mƒõla d≈Øle≈æit√Ω √∫kol ‚Äì poƒç√≠tat v≈°e, co se v lese dƒõje. Kolik kvƒõtin rozkvetlo, kolik pt√°ƒçk≈Ø se narodilo, kolik veverek si schovalo o≈ô√≠≈°ky. Jen≈æe jednoho dne se v≈°echno zamotalo! üå∏ ‚ÄûDnes mi to nƒõjak nejde,‚Äú povzdychla si Kl√°rka. ‚ÄûPo≈ô√°d ztr√°c√≠m poƒçet!‚Äú Vtom p≈ôi≈°el dr√°ƒçek ≈†imonek. ‚ÄûJ√° ti pom≈Ø≈æu,‚Äú ≈ôekl. A tak zaƒçali spolu: üêû ‚ÄûT√°mhle jsou 3 beru≈°ky,‚Äú ≈ôekla Kl√°rka. üê¶ ‚ÄûA tam 2 s√Ωkorky, to je dohromady‚Ä¶?‚Äú ‚Äû5!‚Äú vyk≈ôikl ≈†imonek radostnƒõ.       Pak potkali 4 veverky a ka≈æd√° mƒõla 2 o≈ô√≠≈°ky. ‚ÄûKolik o≈ô√≠≈°k≈Ø dohromady?‚Äú zeptala se v√≠la. ≈†imonek chvilku poƒç√≠tal‚Ä¶ ‚Äû8 o≈ô√≠≈°k≈Ø!‚Äú Cel√Ω den tak spolu poƒç√≠tali. Nakonec Kl√°rka ≈ôekla: ‚ÄûD√≠ky, dr√°ƒçku. Uƒçila jsem les poƒç√≠tat, ale dneska mƒõ to nauƒçil les a Ty!‚Äú     A od t√© doby chodili lesem spolu ‚Äì v√≠la s kouzelnou h≈Ølkou a dr√°ƒçek s bystrou hlaviƒçkou.",
        "moral": "Poƒç√≠t√°n√≠ m≈Ø≈æe b√Ωt z√°bava ‚Äì zvl√°≈°≈•, kdy≈æ na to nejsi s√°m!",
        "obrazek_path": "vila.png"
    },
    "Snƒõhurka a sedm trpasl√≠k≈Ø": {
        "text": "Kdysi d√°vno ≈æila kr√°sn√° d√≠vka jm√©nem Snƒõhurka. Mƒõla vlasy ƒçern√© jako noc, ple≈• b√≠lou jako sn√≠h a srdce laskav√© jako jarn√≠ slunce. Jednoho  dne musela ut√©ct do lesa, proto≈æe zl√° kr√°lovna j√≠ nep≈ô√°la. Bƒõhala mezi stromy, a≈æ narazila na mal√Ω domeƒçek. Zaklepala, ale nikdo  neodpovƒõdƒõl. Opatrnƒõ ve≈°la ‚Äì uvnit≈ô bylo sedm ≈æidliƒçek, sedm hrn√≠ƒçk≈Ø a sedm post√Ωlek. Snƒõhurka byla unaven√°, a tak si na chvilku lehla. A co se nestalo? Domeƒçek pat≈ôil sedmi trpasl√≠k≈Øm ‚Äì ka≈æd√Ω mƒõl jinou barvu ƒçepiƒçky a jm√©no podle sv√© n√°lady: ƒåerven√Ω: Vesel√≠k, Oran≈æov√Ω: Popleta, ≈Ωlut√Ω: Slun√≠ƒçko, Zelen√Ω: Moud≈ô√≠k, Modr√Ω: Plaƒçt√≠k, Fialov√Ω: Chr√°p√°lek, B√≠l√Ω: Poƒçt√°≈ô. Kdy≈æ Snƒõhurku na≈°li, v≈Øbec se nezlobili. Byli r√°di, ≈æe s nimi z≈Østane ‚Äì va≈ôila jim, ukl√≠zela a uƒçila poƒç√≠tat a pozn√°vat barvy. Jednoho dne v≈°ak p≈ôi≈°la zl√° kr√°lovna v p≈ôestrojen√≠ a nab√≠dla Snƒõhurce ƒçerven√© jablko. Ale nebylo obyƒçejn√© ‚Äì bylo zaƒçarovan√©! Snƒõhurka si kousla‚Ä¶ a usnula. Trpasl√≠ci byli smutn√≠. Ale jednoho dne proj√≠≈ædƒõl kolem lesem princ, kter√Ω usly≈°el, co se stalo. Polo≈æil jablko na v√°hu a zjistil, ≈æe ƒçerven√° p≈Ølka v√°≈æila v√≠c ne≈æ zelen√° ‚Äì a byla to ta kouzeln√°! Kdy≈æ jablko rozlomili a zakouzlili kouzelnou formuli (kterou nauƒçil Poƒçt√°≈ô), Snƒõhurka se probudila! A v√≠te co? V≈°ichni se radovali, tancovali podle barev duhy ‚Äì a ka≈æd√Ω den poƒç√≠tali nov√© p≈ô√≠bƒõhy.",
        "moral": "Nƒõkdy i mal√Ω trpasl√≠k nebo obyƒçejn√© ƒç√≠slo m≈Ø≈æe zmƒõnit velk√Ω p≈ô√≠bƒõh.",
        "obrazek_path": "snehurka.png"
    },
    "ƒåerven√° Karkulka": {
        "text": "Karkulka ≈°la nav≈°t√≠vit svou babiƒçku a nesla j√≠ j√≠dlo. V lese potkala vlka, kter√Ω ji p≈ôelstil a dostal se k babiƒçce d≈ô√≠v. Na≈°tƒõst√≠ je obƒõ zachr√°nil stateƒçn√Ω myslivec.",
        "moral": "Kdo je podmƒõt, co je p≈ô√≠sudek? Ve vƒõtƒõ i v p≈ô√≠bƒõhu je d≈Øle≈æit√© vƒõdƒõt, kdo co dƒõl√° a komu. Rozumƒõt vƒõt√°m znamen√° rozumƒõt p≈ô√≠bƒõh≈Øm.",
        "obrazek_path": "karkulka.png"
    },
    "O Zlatovl√°sce": {
        "text": "Kdysi d√°vno ≈æila v z√°mku princezna jm√©nem Zlatovl√°ska. Mƒõla vlasy jako slunce ‚Äì zlat√©, leskl√© a dlouh√© a≈æ po paty. Ale nebyla jen kr√°sn√°, byla i moudr√° a laskav√°. Ka≈æd√Ω den se proch√°zela v zahradƒõ a pov√≠dala si s pt√°ƒçky, kvƒõtinami i mal√Ωmi brouƒçky. Jednoho dne se v kr√°lovstv√≠ objevil mlad√Ω kucha≈ô Ji≈ô√≠k. Pracoval na z√°mku a zaslechl, ≈æe princezna je zaklet√°: ‚ÄûZlatovl√°ska nem≈Ø≈æe b√Ωt ≈°≈•astn√°, dokud nƒõkdo nespln√≠ t≈ôi kouzeln√© √∫koly,‚Äú ≈ôekl star√Ω zahradn√≠k. Ji≈ô√≠k se rozhodl, ≈æe j√≠ pom≈Ø≈æe. Neb√°l se niƒçeho ‚Äì ani draka, ani h√°danek. Prvn√≠ √∫kol: ‚ÄûP≈ôines z ≈ôeky perlu, kterou tam upustil kr√°l,‚Äú ≈ôekla zlat√° rybka. Ji≈ô√≠k skoƒçil do vody, poƒçetl bubliny ‚Äì bylo jich deset ‚Äì a na dnƒõ na≈°el perlu. Druh√Ω √∫kol: ‚ÄûRozlu≈°ti h√°danku,‚Äú ≈ôekla moudr√° sova. ‚ÄûKdy≈æ m√°m dvƒõ k≈ô√≠dla a neum√≠m l√©tat ‚Äì co jsem?‚Äú Ji≈ô√≠k p≈ôem√Ω≈°lel‚Ä¶ ‚ÄûDve≈ôe!‚Äú zvolal. A sova pok√Ωvala hlavou. T≈ôet√≠ √∫kol: ‚ÄûNajdi srdce princezny,‚Äú ≈ôekla ƒçarovn√° kvƒõtina. Ji≈ô√≠k ≈°el do zahrady, kam Zlatovl√°ska r√°da chodila, a posadil se. ‚ÄûTady je jej√≠ srdce. Miluje kvƒõtiny, zv√≠≈ôata a svƒõt,‚Äú ≈ôekl ti≈°e. V tu chv√≠li se zaklet√≠ zlomilo. Zlatovl√°ska se usm√°la a jej√≠ zlat√© vlasy zaz√°≈ôily je≈°tƒõ v√≠c ne≈æ d≈ô√≠v. A jak to dopadlo? Ji≈ô√≠k z≈Østal na z√°mku, va≈ôil tu nejlep≈°√≠ pol√©vku na svƒõtƒõ ‚Äì a srdce Zlatovl√°sky bylo ≈°≈•astn√©.",
        "moral": "Ji≈ô√≠k rozpozn√° p≈ô√≠mou ≈ôeƒç, slovn√≠ druhy a stavbu vƒõty. Moudr√° ≈ôeƒç otev√≠r√° br√°ny.",
        "obrazek_path": "zlatovlaska.png"
    },
    "Snƒõhov√° kr√°lovna": {
        "text": "Byli jednou dva kamar√°di ‚Äì Gerda a Kaj. Ka≈æd√Ω den si hr√°li na zahradƒõ, bƒõhali, sb√≠rali kvƒõtiny a d√≠vali se na hvƒõzdy. Jednoho zimn√≠ho dne ale p≈ôiletƒõla Snƒõhov√° kr√°lovna. Byla kr√°sn√°, ale studen√° jako led. Mr√°z j√≠ l√©tal kolem vlas≈Ø a vloƒçky j√≠ sedaly na ramena. Kdy≈æ Kaj koukal z okna, jedna vloƒçka mu spadla p≈ô√≠mo do oka a mal√Ω st≈ôep ledu mu vklouzl do srdce. Od t√© chv√≠le u≈æ nebyl stejn√Ω. P≈ôestal se sm√°t, zaƒçal b√Ωt zl√Ω a ode≈°el s kr√°lovnou do jej√≠ho ledov√©ho z√°mku na dalek√©m severu. Gerda byla smutn√°, ale nevzdala se. Vydala se Kaje hledat. ≈†la lesem, kolem ≈ôeky, potkala vr√°ny, li≈°ku, babiƒçku s kvƒõtinami, a dokonce i prince a princeznu. V≈°ichni j√≠ pom√°hali. Nakonec do≈°la a≈æ ke zmrzl√©mu z√°mku, kde sedƒõl Kaj ‚Äì √∫plnƒõ ztichl√Ω a bled√Ω. U≈æ si ani nepamatoval, kdo je. Gerda ho obejmula. A slza z jej√≠ho oka dopadla na jeho srdce. Led rozt√°l. Kaj si vzpomnƒõl! Dr≈æeli se za ruce, sn√≠h kolem zaƒçal t√°t a cel√Ω ledov√Ω z√°mek se promƒõnil v jaro. Spolu se vr√°tili dom≈Ø ‚Äì ≈°≈•astn√≠, ≈æe se nikdy nevzdali.",
        "moral": "P≈ô√°telstv√≠ a slova dok√°≈æou roztavit led.",
        "obrazek_path": "snehova_kralovna.png"
    },
    "Pern√≠kov√° chaloupka": {
        "text": "Kdysi d√°vno, v mal√© chalupƒõ na okraji lesa, ≈æil d≈ôevorubec se sv√Ωmi dvƒõma dƒõtmi ‚Äì Jen√≠ƒçkem a Ma≈ôenkou. Byli chud√≠, ale v≈ædy si v≈°echno dƒõlili, i to nejmen≈°√≠. Otec jim jednoho dne dal posledn√≠, co mƒõl: mal√© ƒçerven√© jabl√≠ƒçko. ‚ÄûDƒõti moje, podƒõlte se,‚Äú ≈ôekl. ‚ÄûA≈• v√°m vydr≈æ√≠ co nejd√©le.‚Äú Ma≈ôenka se usm√°la a ≈ôekla: ‚ÄûP≈Ølka pro tebe, p≈Ølka pro mƒõ.‚Äú Jen√≠ƒçek p≈ôik√Ωvl, ale m√≠sto aby jabl√≠ƒçko rozkrojili, jen si z nƒõj oba malinko kousli ‚Äì a pak ho schovali. A co bylo zvl√°≈°tn√≠ ‚Äì jablko z≈Østalo cel√©. Nezd√°lo se, ≈æe by ubylo. ‚ÄûTo je zvl√°≈°tn√≠,‚Äú ≈ôekla Ma≈ôenka. ‚ÄûAsi v√≠, ≈æe se dƒõl√≠me.‚Äú Druh√©ho dne je macecha zavedla hluboko do lesa. Dƒõti si chtƒõly zapamatovat cestu zpƒõt, ale d√©≈°≈• smyl stopy a pt√°ci sezobali drobky. Bloudili dlouho. Kdy≈æ mƒõli hlad, vyt√°hli jabl√≠ƒçko. ‚ÄûU≈æ n√°m moc nezbylo,‚Äú ≈ôekl Jen√≠ƒçek. ‚ÄûAle v≈ædy≈• se na nƒõj pod√≠vej ‚Äì po≈ô√°d je cel√©,‚Äú za≈°eptala Ma≈ôenka. A opravdu ‚Äì jabl√≠ƒçko z≈Øst√°valo kulat√©, leskl√© a ≈°≈•avnat√©, p≈ôesto≈æe se z nƒõj obƒças kousli. Mo≈æn√° proto, ≈æe se nikdy neh√°dali, kdo m√° v√≠c. Pak spat≈ôili chaloupku ‚Äì z pern√≠ku, cukrov√≠ a bonbon≈Ø. Vonƒõla jako sen. Ale dƒõti vƒõdƒõly, ≈æe nƒõco, co je a≈æ p≈ô√≠li≈° sladk√©, m≈Ø≈æe b√Ωt nebezpeƒçn√©. Ulomili si jen kousek ‚Äì a i ten si rozdƒõlili. A jabl√≠ƒçko, kter√© nosili s sebou, po≈ô√°d z≈Øst√°valo v kapse ‚Äì cel√©, tepl√©, jako by d√Ωchalo. Vtom se otev≈ôely dve≈ôe. Vy≈°la star√° ≈æena, vl√≠dn√° na pohled. Pozvala je dovnit≈ô, ale brzy zav≈ôela Jen√≠ƒçka do klece a Ma≈ôenku nutila va≈ôit. Dƒõti v≈°ak neztratily nadƒõji ‚Äì mƒõly po≈ô√°d sv√© jabl√≠ƒçko, kter√© si d√°valy veƒçer potaj√≠ k nosu, aby si p≈ôipomnƒõly domov. Ma≈ôenka vymyslela pl√°n. Kdy≈æ ƒçarodƒõjnice chtƒõla Jen√≠ƒçka up√©ct, poprosila ji, a≈• j√≠ uk√°≈æe, jak se leze do pece. Kdy≈æ tam vlezla, Ma≈ôenka dv√≠≈ôka zav≈ôela. Dƒõti se osvobodily a na≈°ly truhlu se zla≈•√°ky. Ale nejvƒõt≈°√≠ poklad mƒõly u sebe: jabl√≠ƒçko, kter√© z≈Øst√°valo cel√© ‚Äì proto≈æe se o nƒõj v≈ædy dƒõlily. Na cestƒõ dom≈Ø potk√°valy hladov√© zv√≠≈ô√°tko, unaven√©ho poutn√≠ka ‚Äì ka≈æd√©mu nab√≠dly kousek. A jablko? Z≈Øst√°valo kulat√©. Mo≈æn√° proto, ≈æe ten, kdo d√°v√° s l√°skou, nikdy nep≈ôijde o to, co m√°.",
        "moral": "Jen√≠ƒçek a Ma≈ôenka dƒõl√≠ jabl√≠ƒçko i slova ‚Äì slabiky, hl√°sky, v√Ωznamy. Poctivost a porozumƒõn√≠ vedou dom≈Ø.",
        "obrazek_path": "pernikova_chaloupka.png"
    },
    "O slepiƒçce a kohoutkovi": {
        "text": "Byli jednou kohoutek Galois a slepiƒçka Poule. Cel√Ω den se spolu hrabali v prachu dvora a hledali dobr≈Øtky. Byli nerozluƒçn√≠ ‚Äì v≈ædy si dƒõlili, co na≈°li, a nikdy se neh√°dali. Jednoho dne, kdy≈æ u≈æ slunce zapadalo a zemƒõ vonƒõla veƒçerem, na≈°el kohoutek v hl√≠nƒõ zlatav√© sem√≠nko ‚Äì kr√°sn√©, kulat√©, leskl√©, jak√© je≈°tƒõ nikdy nevidƒõli. ‚ÄûJ√©, sem√≠nko!‚Äú zakokrhal kohoutek. ‚ÄûNa≈°el jsem ho prvn√≠, je moje!‚Äú Slepiƒçka ale sklopila hlaviƒçku a ti≈°e ≈ôekla: ‚ÄûCopak jsme se nedomluvili, ≈æe v≈°e dƒõl√≠me nap≈Øl?‚Äú Kohoutek se zarazil. Dlouze se na sem√≠nko zad√≠val, pak na slepiƒçku, a zase na sem√≠nko. ‚ÄûAle kdy≈æ jsem ho na≈°el prvn√≠...‚Äú zamumlal. A v tu chv√≠li se zlat√© sem√≠nko zat≈ôpytilo a zaƒçalo mizet. Kohoutek z≈Østal st√°t s otev≈ôen√Ωm zob√°kem ‚Äì sem√≠nko bylo pryƒç! V tr√°vƒõ za≈°umƒõl v√°nek a znƒõl jako hlas: ‚ÄûCo je sobeck√©, ztr√°c√≠ se. Co je sd√≠len√©, roste.‚Äú Kohoutek se pod√≠val na slepiƒçku. Zahanbenƒõ sklonil hlavu. ‚ÄûP≈ô√≠≈°tƒõ budeme dƒõlit, a≈• najde kdo chce,‚Äú ≈ôekl. A od t√© doby si v≈°e, co na≈°li, spravedlivƒõ rozdƒõlovali ‚Äì i kdy≈æ to bylo jen jedno jedin√© sem√≠nko.",
        "moral": "Co je nalezeno pro sebe, b√Ωv√° snadno ztraceno. Co je sd√≠leno, m√° s√≠lu r≈Øst.",
        "obrazek_path": "slepicka.png"
    },
    "O jednoro≈æci a dr√°ƒçkovi": {
    "text": "V zemi za Duhov√Ωmi horami ≈æil b√≠l√Ω jednoro≈æec jm√©nem Lumin. Jeho roh z√°≈ôil tak jasnƒõ, ≈æe dok√°zal proz√°≈ôit i nejtemnƒõj≈°√≠ noc. Lumin miloval klid a ticho louky, kde rostly kvƒõtiny v≈°ech barev, a ka≈æd√Ω den se proch√°zel mezi nimi, aby nasb√≠ral trochu radosti do sv√©ho kouzeln√©ho srdce. Jednoho dne usly≈°el v d√°lce podivn√© ≈°ustƒõn√≠ a ≈°upinat√© ≈°kr√°b√°n√≠. Kdy≈æ se otoƒçil, uvidƒõl mal√©ho zelen√©ho dr√°ƒçka s kulat√Ωma oƒçima a k≈ô√≠dly, kter√° byla skoro vƒõt≈°√≠ ne≈æ on s√°m. Dr√°ƒçek se jmenoval F√≠gl√≠k ‚Äì a byl to opravdov√Ω zvƒõdavec. Umƒõl sice chrlit ohe≈à, ale radƒõji z nƒõj dƒõlal jen tepl√Ω v√°nek, aby nikomu neubl√≠≈æil. ‚ÄûAhoj,‚Äú zavolal F√≠gl√≠k, ‚Äûco tu dƒõl√°≈°?‚Äú ‚ÄûSb√≠r√°m svƒõtlo a radost do sv√©ho rohu,‚Äú odpovƒõdƒõl Lumin a usm√°l se. ‚ÄûSvƒõtlo? To by se mi hodilo. V jeskyni, kde bydl√≠m, je po≈ô√°d tma.‚Äú A tak se zrodil n√°pad ‚Äì ka≈æd√Ω den spolu vyrazili na cestu: Lumin sv√Ωm rohem osvƒõtloval tmav√© kouty lesa a F√≠gl√≠k mu na opl√°tku pom√°hal p≈ôeletƒõt hlubok√© rokle, kdy≈æ mu nab√≠dl k≈ô√≠dla. ƒåasem zjistili, ≈æe dohromady tvo≈ô√≠ dokonal√Ω t√Ωm ‚Äì svƒõtlo a teplo, klid a hravost, zem a nebe. Jednoho veƒçera se p≈ôihnala bou≈ôe. Lesem se prohnal v√≠tr tak siln√Ω, ≈æe utrhl most p≈ôes ≈ôeku. Lumin by se s√°m p≈ôes vodu nedostal, ale F√≠gl√≠k ho vzal na h≈ôbet a p≈ôenesl ho do bezpeƒç√≠. Vdƒõƒçn√Ω jednoro≈æec potom rozz√°≈ôil cel√Ω b≈ôeh tak jasnƒõ, ≈æe ostatn√≠ zv√≠≈ô√°tka na≈°la cestu dom≈Ø. Od t√© doby byli Lumin a F√≠gl√≠k nerozluƒçn√≠. A kdokoliv z kraje pot≈ôeboval pomoc, vƒõdƒõl, ≈æe kdy≈æ uvid√≠ svƒõtlo rohu a zaslechne ≈°ustƒõn√≠ mal√Ωch draƒç√≠ch k≈ô√≠del, p≈ôich√°z√≠ dva nejlep≈°√≠ p≈ô√°tel√©, kte≈ô√≠ nikdy neodm√≠tnou podat pomocnou ruku‚Ä¶ nebo k≈ô√≠dlo.", 
    "moral": "Skuteƒçn√© p≈ô√°telstv√≠ vznik√° tam, kde se lid√© (nebo kouzeln√© bytosti) dopl≈àuj√≠ a pom√°haj√≠ si. Ka≈æd√Ω m√° jin√© schopnosti ‚Äì a pr√°vƒõ d√≠ky nim m≈Ø≈æeme spoleƒçnƒõ zvl√°dnout to, co bychom sami nedok√°zali.",
    "obrazek_path":"jednorozec.png"
    },
}
# -----------------------
# Pozn√°mky k uƒçivu (ƒåJ)
# -----------------------
cjl_notes_by_level = {
    "1. t≈ô√≠da": [
        "Hl√°sky, p√≠smena, slabiky. Velk√© p√≠smeno na zaƒç√°tku vƒõty, teƒçka na konci.",
        "Dopl≈àov√°n√≠ p√≠smen, poƒç√≠t√°n√≠ slabik (nap≈ô.: slovo m√° 2 slabiky)."
    ],
    "2. t≈ô√≠da": [
        "Mƒõkk√©/tvrd√©/obojetn√© souhl√°sky v kontextu slova.",
        "Vybrat spr√°vn√© i/y podle pravidel a v√Ωznamu vƒõty."
    ],
    "3. t≈ô√≠da": [
        "Vyjmenovan√° slova (B, L, M, P, S, V, Z) a i/y v p≈ô√≠buzn√Ωch slovech.",
        "Cviƒçen√≠ na dopl≈àov√°n√≠ i/y a rozli≈°en√≠ v√Ωznam≈Ø."
    ],
    "4. t≈ô√≠da": [
        "Slovn√≠ druhy ‚Äì z√°kladn√≠ orientace.",
        "Urƒçov√°n√≠ z√°kladn√≠ch slovn√≠ch druh≈Ø v kr√°tk√Ωch vƒõt√°ch."
    ],
    "5. t≈ô√≠da": [
        "Vƒõtn√© ƒçleny (podmƒõt, p≈ô√≠sudek, p≈ôedmƒõt, p≈ô√≠sloveƒçn√° urƒçen√≠, p≈ô√≠vlastek).",
        "Z√°kladn√≠ anal√Ωza jednoduch√Ωch vƒõt."
    ],
    "6. t≈ô√≠da": [
        "Mluvnick√© kategorie; shoda p≈ô√≠sudku s podmƒõtem; druhy vƒõt; p≈ô√≠m√° ≈ôeƒç."
    ],
    "7. t≈ô√≠da": [
        "Souvƒõt√≠, spojky, druhy vedlej≈°√≠ch vƒõt (z√°kladn√≠ orientace)."
    ],
    "8. t≈ô√≠da": [
        "Vedlej≈°√≠ vƒõty, interpunkce v souvƒõt√≠; slovn√≠ z√°soba."
    ],
    "9. t≈ô√≠da": [
        "Rekapitulace pravopisu; p≈ô√≠m√° ≈ôeƒç; liter√°rn√≠ minimum."
    ]
}

# -----------------------
# Pozn√°mky k uƒçivu (MA)
# -----------------------
math_notes_by_level = {
    "1. t≈ô√≠da": [
        "Sƒç√≠t√°n√≠ a odƒç√≠t√°n√≠ do 20 (s i bez p≈ôechodu p≈ôes 10).",
        "Form√°t odpovƒõdi: cel√© ƒç√≠slo (nap≈ô. 14)."
    ],
    "2. t≈ô√≠da": [
        "Sƒç√≠t√°n√≠ a odƒç√≠t√°n√≠ do 100. Mal√° n√°sobilka 2‚Äì9.",
        "Form√°t odpovƒõdi: cel√© ƒç√≠slo (nap≈ô. 24, 7)."
    ],
    "3. t≈ô√≠da": [
        "Sƒç√≠t√°n√≠/odƒç√≠t√°n√≠ do 1000; dƒõlen√≠ se zbytkem.",
        "Form√°t odpovƒõdi (dƒõlen√≠ se zbytkem): ‚Äûpod√≠l zb. zbytek‚Äú (nap≈ô. 5 zb. 2)."
    ],
    "4. t≈ô√≠da": [
        "N√°soben√≠ a dƒõlen√≠ v√≠cecifern√Ωmi ƒç√≠sly; odhady a zaokrouhlov√°n√≠ (na des√≠tky/stovky).",
        "Form√°t odpovƒõdi: cel√© ƒç√≠slo; u zaokrouhlen√≠ cel√© ƒç√≠slo (nap≈ô. 350)."
    ],
    "5. t≈ô√≠da": [
        "Desetinn√° ƒç√≠sla (¬±, √ó/√∑ jednocifern√Ωm); zlomky (kr√°cen√≠, porovn√°n√≠).",
        "Form√°t odpovƒõdi: desetinn√° ƒç√≠sla na 2 desetinn√° m√≠sta (teƒçka i ƒç√°rka); zlomky ve zkr√°cen√©m tvaru ‚Äûa/b‚Äú."
    ],
    "6. t≈ô√≠da": [
        "Desetinn√° ƒç√≠sla (¬±); zlomky ‚Äì sƒç√≠t√°n√≠/odƒç√≠t√°n√≠ se stejn√Ωm jmenovatelem; jednoduch√° procenta (p% z N).",
        "Form√°t odpovƒõdi: desetinn√° na 2 dp; zlomky ve zkr√°cen√©m tvaru; procenta jako ƒçist√© ƒç√≠slo bez jednotky."
    ],
    "7. t≈ô√≠da": [
        "Cel√° ƒç√≠sla (¬±, √ó, √∑ jednocifern√Ωm; i z√°porn√© v√Ωsledky); line√°rn√≠ rovnice ax+b=c; pomƒõr a √∫mƒõrnost.",
        "Form√°t odpovƒõdi: ƒç√≠slo (m≈Ø≈æe b√Ωt z√°porn√©); pomƒõr ‚Äûa : b‚Äú (zkr√°cenƒõ); u rovnice staƒç√≠ hodnota x (nap≈ô. 3)."
    ],
    "8. t≈ô√≠da": [
        "Mocniny a odmocniny; Pythagorova vƒõta; kruh (obvod/obsah, œÄ‚âà3.14).",
        "Form√°t odpovƒõdi: ƒç√≠slo; u kruhu na 2 desetinn√° m√≠sta."
    ],
    "9. t≈ô√≠da": [
        "Rovnice (i se z√°vorkami); x^2=a; statistika (pr≈Ømƒõr/medi√°n); procenta/finanƒçn√≠ (jednoduch√Ω √∫rok, zpƒõtn√© procento).",
        "Form√°t odpovƒõdi: ƒç√≠slo; u x^2=a staƒç√≠ jedna hodnota (nap≈ô. -7 nebo 7); pr≈Ømƒõr na 2 dp; procenta/√∫rok ƒçist√© ƒç√≠slo."
    ]
}

# -----------------------
# Pozn√°mky k uƒçivu (IT) ‚Äì hlavn√≠ t√©ma NAHO≈òE + vzorov√Ω k√≥d
# -----------------------
it_notes_by_level = {
    "1. t≈ô√≠da": [
        "Tisk textu a ƒç√≠sel pomoc√≠ p≈ô√≠kazu print. (Navazuje na ƒåJ: ƒçten√≠ kr√°tk√Ωch slov a vƒõt; MA: mal√© poƒçty.)",
        "P≈ô√≠klad ‚Äì text:\n```python\nprint('Ahoj')\nprint(\"Drak\")\n```",
        "P≈ô√≠klad ‚Äì ƒç√≠sla:\n```python\nprint(2+3)\nprint(3*4)\n```"
    ],
    "2. t≈ô√≠da": [
        "Spojov√°n√≠ textu a pr√°ce s d√©lkou textu. (Navazuje na ƒåJ: slova a p√≠smena.)",
        "P≈ô√≠klad ‚Äì vƒõta s mezerou:\n```python\nprint('Ahoj svƒõte')\n```",
        "P≈ô√≠klad ‚Äì d√©lka slova:\n```python\nprint(len('poh√°dka'))  # vytiskne 7\n```",
        "P≈ô√≠klad ‚Äì posledn√≠ p√≠smeno:\n```python\ns = 'v√≠la'\nprint(s[-1])  # vytiskne a\n```"
    ],
    "3. t≈ô√≠da": [
        "Cel√© dƒõlen√≠ // a zbytek %; posledn√≠ znak ≈ôetƒõzce. (Navazuje na MA: dƒõlen√≠ se zbytkem; ƒåJ: pr√°ce s p√≠smeny.)",
        "P≈ô√≠klad ‚Äì celoƒç√≠seln√© dƒõlen√≠ a zbytek:\n```python\nprint(10//3)  # 3\nprint(10%3)   # 1\n```",
        "P≈ô√≠klad ‚Äì posledn√≠ p√≠smeno:\n```python\ns = 'drak'\nprint(s[-1])  # k\n```"
    ],
    "4. t≈ô√≠da": [
        "Podm√≠nka (if/else), zaokrouhlen√≠ pomoc√≠ round, porovn√°n√≠. (Navazuje na MA: zaokrouhlov√°n√≠, porovn√°v√°n√≠.)",
        "P≈ô√≠klad ‚Äì podm√≠nka:\n```python\na = 5\nprint('ano' if a > 3 else 'ne')\n```",
        "P≈ô√≠klad ‚Äì zaokrouhlen√≠ na 2 desetinn√° m√≠sta:\n```python\nprint(round(3.14159, 2))  # 3.14\n```",
        "P≈ô√≠klad ‚Äì porovn√°n√≠:\n```python\nprint(7 > 4)  # True\n```"
    ],
    "5. t≈ô√≠da": [
        "Tisk a pr√°ce se seznamem: d√©lka, posledn√≠ prvek, souƒçet prvk≈Ø. (Navazuje na MA: sƒç√≠t√°n√≠ v√≠ce ƒç√≠sel.)",
        "P≈ô√≠klad ‚Äì d√©lka seznamu:\n```python\nL = [1, 2, 3]\nprint(len(L))  # 3\n```",
        "P≈ô√≠klad ‚Äì posledn√≠ prvek seznamu:\n```python\nL = [3, 6, 9]\nprint(L[-1])  # 9\n```",
        "P≈ô√≠klad ‚Äì souƒçet prvk≈Ø seznamu cyklem:\n```python\nL = [4, 5, 9]\ns = 0\nfor x in L:\n    s += x\nprint(s)  # 18\n```"
    ],
    "6. t≈ô√≠da": [
        "Desetinn√° ƒç√≠sla (2 desetinn√° m√≠sta) a procenta. (Navazuje na MA: procenta a desetinn√° ƒç√≠sla.)",
        "P≈ô√≠klad ‚Äì 2 desetinn√° m√≠sta:\n```python\nprint(f\"{10/4:.2f}\")  # 2.50\n```",
        "P≈ô√≠klad ‚Äì procenta:\n```python\ntotal = 200\np = 15\nprint(f\"{total*p/100:.2f}\")  # 30.00\n```"
    ],
    "7. t≈ô√≠da": [
        "Cel√° ƒç√≠sla (i z√°porn√°), vlastn√≠ funkce, // a % se z√°porn√Ωmi. (Navazuje na MA: cel√° ƒç√≠sla, jednoduch√© funkce v IT.)",
        "P≈ô√≠klad ‚Äì sƒç√≠t√°n√≠ se z√°porn√Ωmi:\n```python\nprint(-3 + 5)  # 2\n```",
        "P≈ô√≠klad ‚Äì funkce:\n```python\ndef dvojnasobek(x):\n    return x*2\nprint(dvojnasobek(6))  # 12\n```",
        "P≈ô√≠klad ‚Äì dƒõlen√≠ a zbytek se z√°porn√Ωmi:\n```python\nprint(-11//4)\nprint(-11%4)\n```"
    ],
    "8. t≈ô√≠da": [
        "Mocniny, odmocniny, Pythagoras, obvod kruhu. (Navazuje na MA: mocniny/odmocniny, geometrie.)",
        "P≈ô√≠klad ‚Äì mocnina a odmocnina:\n```python\nprint(7**2)\nprint(49**0.5)\n```",
        "P≈ô√≠klad ‚Äì Pythagoras (3,4,5):\n```python\na = 3; b = 4\nprint((a*a + b*b) ** 0.5)  # 5.0\n```",
        "P≈ô√≠klad ‚Äì obvod kruhu r=5 (œÄ‚âà3.14):\n```python\nr = 5\nprint(f\"{2*3.14*r:.2f}\")\n```"
    ],
    "9. t≈ô√≠da": [
        "Pr≈Ømƒõr a medi√°n seznamu, spojov√°n√≠ slov do vƒõty. (Navazuje na MA: statistika; ƒåJ: vƒõtn√° stavba.)",
        "P≈ô√≠klad ‚Äì pr≈Ømƒõr (2 dp):\n```python\nL = [2, 4, 6]\nprint(f\"{sum(L)/len(L):.2f}\")  # 4.00\n```",
        "P≈ô√≠klad ‚Äì medi√°n u sud√©ho poƒçtu:\n```python\nL = [1, 4, 7, 8]\nm = (L[1] + L[2]) / 2\nprint(f\"{m:.2f}\")  # 5.50\n```",
        "P≈ô√≠klad ‚Äì spojov√°n√≠ slov do vƒõty:\n```python\nslova = ['Uƒç√≠me', 'se', 'Python']\nprint(' '.join(slova))\n```"
    ],
}

# -----------------------
# IT √∫koly ‚Äì 20/roƒçn√≠k, starter pr√°zdn√Ω, hodnot√≠ se stdout
# -----------------------
def build_it_tasks_by_level():
    tasks = {}
    # 1. t≈ô√≠da
    t1 = []
    texts = ["Ahoj", "Drak", "V√≠la", "Python", "Les", "Popelka", "≈†imonek", "Kl√°rka", "Bublina", "Poh√°dka"]
    sums = [(2,3),(5,4),(7,2),(9,1),(6,3)]
    prods = [(2,5),(3,3),(4,2),(5,2),(6,2)]
    for s in texts:
        t1.append({"prompt": f"Vytiskni p≈ôesnƒõ text: {s}", "starter": "", "expected_stdout": s})
    for a,b in sums:
        t1.append({"prompt": f"Vytiskni v√Ωsledek {a}+{b}", "starter": "", "expected_stdout": str(a+b)})
    for a,b in prods:
        t1.append({"prompt": f"Vytiskni v√Ωsledek {a}*{b}", "starter": "", "expected_stdout": str(a*b)})
    tasks["1. t≈ô√≠da"] = t1[:20]

    # 2. t≈ô√≠da
    t2=[]
    pairs = [("Ahoj","svƒõte"),("Dobr√Ω","den"),("V√≠la","Kl√°rka"),("Drak","≈†imonek"),("Poh√°dky","bav√≠")]
    words = ["les","strom","okno","koƒçka","drak","poh√°dka","v√≠la","k√°men"]
    for a,b in pairs:
        t2.append({"prompt": f"Vytiskni: {a} {b} (vƒçetnƒõ mezery)", "starter": "", "expected_stdout": f"{a} {b}"})
    for w in words:
        t2.append({"prompt": f"Vytiskni d√©lku slova '{w}'", "starter": "", "expected_stdout": str(len(w))})
    nums = [6,10,3,7,9,12,5,8]
    for x in nums:
        t2.append({"prompt": f"Do promƒõnn√© x ulo≈æ {x} a vytiskni x", "starter": "", "expected_stdout": str(x)})
    # dopl≈àkov√© (posledn√≠ znak)
    t2.append({"prompt": "Vytiskni posledn√≠ p√≠smeno slova 'v√≠la'", "starter": "", "expected_stdout": "a"})
    t2.append({"prompt": "Vytiskni posledn√≠ p√≠smeno slova 'drak'", "starter": "", "expected_stdout": "k"})
    tasks["2. t≈ô√≠da"] = t2[:20]

    # 3. t≈ô√≠da
    t3=[]
    divs=[(10,3),(12,5),(15,4),(20,6)]
    mods=[(10,3),(12,5),(15,4),(20,6)]
    strings=["v√≠la","drak","les","poh√°dka","kl√≠ƒç","strom"]
    sums3=[(12,34),(7,15),(20,22),(9,11)]
    for a,b in divs:
        t3.append({"prompt": f"Vytiskni {a}//{b}", "starter":"", "expected_stdout": str(a//b)})
    for a,b in mods:
        t3.append({"prompt": f"Vytiskni {a}%{b}", "starter":"", "expected_stdout": str(a%b)})
    for s in strings:
        t3.append({"prompt": f"Vytiskni posledn√≠ p√≠smeno slova '{s}'", "starter":"", "expected_stdout": s[-1]})
    for a,b in sums3:
        t3.append({"prompt": f"Vytiskni souƒçet {a}+{b}", "starter":"", "expected_stdout": str(a+b)})
    tasks["3. t≈ô√≠da"] = t3[:20]

    # 4. t≈ô√≠da
    t4=[]
    for a in [5,2,7,0,10,3]:
        exp = "ano" if a>3 else "ne"
        t4.append({"prompt": f"Kdy≈æ a={a}, vytiskni 'ano', pokud a>3, jinak 'ne'.", "starter":"", "expected_stdout": exp})
    rounds=[3.14159,2.71828,1.995,2.345,7.005,5.555,12.349,0.845]
    for v in rounds:
        t4.append({"prompt": f"Zaokrouhli {v} na 2 desetinn√° m√≠sta a vytiskni", "starter":"", "expected_stdout": f"{round(v,2)}"})
    comps=[(7,4),(2,9),(5,5),(10,1),(3,3)]
    for a,b in comps:
        t4.append({"prompt": f"Vytiskni True/False: {a}>{b}", "starter":"", "expected_stdout": str(a>b)})
    tasks["4. t≈ô√≠da"] = t4[:20]

    # 5. t≈ô√≠da
    t5=[]
    lists=[[1,2,3],[10,20,30],[2,3,5],[4,5,9],[6,1,7],[8,0,2],[9,9,9],[3,6,9],[5,10,15],[7,8,9]]
    for L in lists[:7]:
        t5.append({"prompt": f"Vytiskni d√©lku seznamu {L}", "starter":"", "expected_stdout": str(len(L))})
    for L in lists[7:10]:
        t5.append({"prompt": f"Vytiskni posledn√≠ prvek seznamu {L}", "starter":"", "expected_stdout": str(L[-1])})
    for L in lists[4:10]:
        t5.append({"prompt": f"Seƒçti prvky {L} cyklem for a vytiskni souƒçet", "starter":"", "expected_stdout": str(sum(L))})
    tasks["5. t≈ô√≠da"] = t5[:20]

    # 6. t≈ô√≠da
    t6=[]
    decs=[(10,4),(7,2),(5,2),(9,4),(8,3)]
    for a,b in decs:
        t6.append({"prompt": f"Vytiskni {a}/{b} na 2 desetinn√° m√≠sta", "starter":"", "expected_stdout": f"{a/b:.2f}"})
    sums=[(3.5,2.25),(1.2,3.4),(5.55,2.45),(10.0,0.75),(2.345,2.005)]
    for a,b in sums:
        t6.append({"prompt": f"Vytiskni souƒçet {a}+{b} na 2 dp", "starter":"", "expected_stdout": f"{(a+b):.2f}"})
    perc=[(200,15),(500,20),(250,12),(400,25),(800,5),(1000,30),(150,40),(90,50),(360,10),(720,15)]
    for total,p in perc[:10]:
        t6.append({"prompt": f"Vytiskni {p}% z {total} (na 2 dp)", "starter":"", "expected_stdout": f"{total*p/100:.2f}"})
    tasks["6. t≈ô√≠da"] = t6[:20]

    # 7. t≈ô√≠da
    t7=[]
    ints=[(-3,5),(7,-4),(-10,-2),(0,7),(-8,3),(5,0),(9,-9),(12,-5),(6,-11),(13,-7)]
    for a,b in ints:
        t7.append({"prompt": f"Vytiskni {a}+{b}", "starter":"", "expected_stdout": str(a+b)})
    t7.append({"prompt":"Definuj funkci dvojnasobek(x) a vytiskni dvojnasobek(6)","starter":"","expected_stdout":"12"})
    divmods=[(-10,3),(-11,4),(-7,5),(-20,6)]
    for a,b in divmods:
        t7.append({"prompt": f"Vytiskni {a}//{b}", "starter":"", "expected_stdout": str(a//b)})
        t7.append({"prompt": f"Vytiskni {a}%{b}", "starter":"", "expected_stdout": str(a%b)})
    tasks["7. t≈ô√≠da"] = t7[:20]

    # 8. t≈ô√≠da
    t8=[]
    powers=[(3,2),(4,2),(5,2),(2,3),(6,2),(7,2),(8,2),(9,2)]
    for n,e in powers:
        t8.append({"prompt": f"Vytiskni {n}**{e}", "starter":"", "expected_stdout": str(n**e)})
    roots=[9,16,25,36,49,64]
    for s in roots:
        t8.append({"prompt": f"Vytiskni druhou odmocninu z {s} (pomoc√≠ **0.5)", "starter":"", "expected_stdout": str(float(s**0.5))})
    pyth=[(3,4,5),(5,12,13),(6,8,10)]
    for a,b,c in pyth:
        t8.append({"prompt": f"Pro odvƒõsny {a} a {b} vytiskni p≈ôeponu (Pythagoras)", "starter":"", "expected_stdout": str(float(c))})
    circles=[3,4,5,7]
    for r in circles:
        t8.append({"prompt": f"Vytiskni obvod kruhu pro r={r} (œÄ‚âà3.14, 2 dp)", "starter":"", "expected_stdout": f"{2*3.14*r:.2f}"})
    tasks["8. t≈ô√≠da"] = t8[:20]

    # 9. t≈ô√≠da
    t9=[]
    means=[[2,4,6],[1,2,3,4,5],[10,20,30],[5,5,5,5],[3,7,11]]
    for arr in means:
        t9.append({"prompt": f"Vytiskni pr≈Ømƒõr ƒç√≠sel {arr} (2 dp)", "starter":"", "expected_stdout": f"{sum(arr)/len(arr):.2f}"})
    med_pairs=[[1,4,7,8],[2,5,6,10],[3,3,7,9],[0,10,20,30]]
    for arr in med_pairs:
        med=(arr[1]+arr[2])/2
        t9.append({"prompt": f"Vytiskni medi√°n ƒç√≠sel {arr} (2 dp)", "starter":"", "expected_stdout": f"{med:.2f}"})
    reverse=[(120,20),(150,50),(240,20),(330,10)]
    for new,p in reverse:
        t9.append({"prompt": f"Po zdra≈æen√≠ o {p}% je cena {new}. Vytiskni p≈Øvodn√≠ (2 dp)", "starter":"", "expected_stdout": f"{(new/(1+p/100)):.2f}"})
    joins=[["Ahoj","jak","se","m√°≈°?"],["Dnes","je","p√°tek"],["Uƒç√≠me","se","Python"],["Poh√°dky","n√°s","bav√≠"]]
    for slova in joins:
        t9.append({"prompt": f"Sestav vƒõtu ze slov {slova} (mezera mezi slovy)", "starter":"", "expected_stdout": " ".join(slova)})
    tasks["9. t≈ô√≠da"] = t9[:20]

    return tasks

it_tasks_by_level = build_it_tasks_by_level()

# -----------------------
# Gener√°tor matematick√Ωch √∫loh (MA)
# -----------------------
def generate_math_problem(level: str):
    lvl = (level or "").strip()

    if lvl == "1. t≈ô√≠da":
        op = random.choice(["+", "-"])
        if op == "+":
            a = random.randint(0, 20)
            b = random.randint(0, 20 - a)
        else:
            a = random.randint(0, 20)
            b = random.randint(0, a)
        q = f"${a} {op} {b}$"
        ans = str(eval(f"{a}{op}{b}"))
        return q, ans, "int"

    elif lvl == "2. t≈ô√≠da":
        t = random.choice(["add_sub", "mul"])
        if t == "add_sub":
            op = random.choice(["+", "-"])
            if op == "+":
                a = random.randint(0, 100)
                b = random.randint(0, 100 - a)
            else:
                a = random.randint(0, 100)
                b = random.randint(0, a)
            q = f"${a} {op} {b}$"
            ans = str(eval(f"{a}{op}{b}"))
            return q, ans, "int"
        else:
            a = random.randint(2, 9)
            b = random.randint(2, 9)
            q = f"${a} \\cdot {b}$"
            ans = str(a * b)
            return q, ans, "int"

    elif lvl == "3. t≈ô√≠da":
        t = random.choice(["add_sub_1000", "div_remainder"])
        if t == "add_sub_1000":
            op = random.choice(["+", "-"])
            a = random.randint(0, 1000)
            b = random.randint(0, 1000)
            if op == "-":
                a, b = max(a, b), min(a, b)
            q = f"${a} {op} {b}$"
            ans = str(eval(f"{a}{op}{b}"))
            return q, ans, "int"
        else:
            d = random.randint(2, 9)
            qv = random.randint(2, 80)
            r = random.randint(0, d - 1)
            a = d * qv + r
            q = f"${a} \\div {d}$"
            ans = f"{qv} zb. {r}"
            return q, ans, "div_remainder"

    elif lvl == "4. t≈ô√≠da":
        t = random.choice(["mul", "div", "round"])
        if t == "mul":
            a = random.randint(100, 999)
            b = random.randint(2, 20)
            q = f"${a} \\cdot {b}$"
            ans = str(a * b)
            return q, ans, "int"
        elif t == "div":
            b = random.randint(2, 20)
            qv = random.randint(50, 500)
            a = b * qv
            q = f"${a} \\div {b}$"
            ans = str(qv)
            return q, ans, "int"
        else:
            a = random.randint(100, 999)
            to = random.choice(["des√≠tky", "stovky"])
            rounded = round(a / 10) * 10 if to == "des√≠tky" else round(a / 100) * 100
            q = f"Zaokrouhli ƒç√≠slo {a} na {to}."
            ans = str(rounded)
            return q, ans, "int"

    elif lvl == "5. t≈ô√≠da":
        t = random.choice(["dec_addsub", "dec_muldiv", "frac_simplify"])
        if t == "dec_addsub":
            a = round(random.uniform(1, 100), 2)
            b = round(random.uniform(0, 50), 2)
            op = random.choice(["+", "-"])
            if op == "-" and a < b:
                a, b = b, a
            q = f"${a} {op} {b}$"
            ans = f"{round(eval(f'{a}{op}{b}'), 2):.2f}"
            return q, ans, "decimal_2dp"
        elif t == "dec_muldiv":
            a = round(random.uniform(1, 100), 2)
            b = random.randint(2, 9)
            op = random.choice(["*", "/"])
            if op == "*":
                q = f"${a} \\cdot {b}$"
                ans = f"{round(a * b, 2):.2f}"
            else:
                q = f"${a} \\div {b}$"
                ans = f"{round(a / b, 2):.2f}"
            return q, ans, "decimal_2dp"
        else:
            num = random.randint(2, 18)
            den = random.randint(num + 1, 24)
            if math.gcd(num, den) == 1:
                den *= 2
            rn, rd = reduce_fraction(num, den)
            q = f"Zkra≈• zlomek $\\frac{{{num}}}{{{den}}}$ na z√°kladn√≠ tvar. (Zapi≈° jako ƒçitatel/jmenovatel.)"
            ans = f"{rn}/{rd}"
            return q, ans, "fraction_reduced"

    elif lvl == "6. t≈ô√≠da":
        t = random.choice(["dec_addsub", "frac_addsub_same", "percent_basic"])
        if t == "dec_addsub":
            a = round(random.uniform(1, 200), 2)
            b = round(random.uniform(1, 200), 2)
            op = random.choice(["+", "-"])
            if op == "-" and a < b:
                a, b = b, a
            q = f"${a} {op} {b}$"
            ans = f"{round(eval(f'{a}{op}{b}'), 2):.2f}"
            return q, ans, "decimal_2dp"
        elif t == "frac_addsub_same":
            den = random.randint(2, 12)
            a = random.randint(1, den - 1)
            b = random.randint(1, den - 1)
            if random.random() < 0.5:
                q = f"Sƒç√≠tej: $\\frac{{{a}}}{{{den}}} + \\frac{{{b}}}{{{den}}}$ a zkra≈•."
                num = a + b
            else:
                big, small = max(a, b), min(a, b)
                q = f"Odƒç√≠tej: $\\frac{{{big}}}{{{den}}} - \\frac{{{small}}}{{{den}}}$ a zkra≈•."
                num = big - small
            if num == 0:
                ans = "0/1"
            else:
                rn, rd = reduce_fraction(num, den)
                ans = f"{rn}/{rd}"
            return q, ans, "fraction_reduced"
        else:
            total = random.choice([100, 200, 250, 400, 500, 800, 1000])
            p = random.choice([5, 10, 12, 15, 20, 25, 30, 40, 50])
            q = f"Kolik je {p}% z {total}?"
            ans = f"{round(total * p / 100, 2):.2f}"
            return q, ans, "decimal_2dp_number_only"

    elif lvl == "7. t≈ô√≠da":
        t = random.choice(["integers", "linear", "ratio", "proportion"])
        if t == "integers":
            a = random.randint(-50, 50)
            b = random.randint(-50, 50)
            op = random.choice(["+", "-"])
            q = f"${a} {op} {b}$"
            ans = str(eval(f"{a}{op}{b}"))
            return q, ans, "int"
        elif t == "linear":
            a = random.randint(2, 9)
            x_val = random.randint(-10, 10)
            b = random.randint(-10, 10)
            c = a * x_val + b
            q = f"Vy≈ôe≈° rovnici: ${a}x + ({b}) = {c}$, najdi $x$."
            ans = str(x_val)
            return q, ans, "int"
        elif t == "ratio":
            a = random.randint(2, 50)
            b = random.randint(2, 50)
            ra, rb = reduce_fraction(a, b)
            q = f"Zkra≈• pomƒõr {a} : {b}."
            ans = f"{ra} : {rb}"
            return q, ans, "ratio"
        else:
            a = random.randint(2, 12)
            b = random.randint(2, 12)
            x = random.randint(2, 12)
            d = a * x / b
            q = f"Vy≈ôe≈° √∫mƒõru: $\\frac{{{a}}}{{{b}}} = \\frac{{{x}}}{{?}}$"
            ans = f"{d:.2f}"
            return q, ans, "decimal_2dp"

    elif lvl == "8. t≈ô√≠da":
        t = random.choice(["power", "root", "pythag", "circle"])
        if t == "power":
            n = random.randint(2, 10)
            e = random.choice([2, 3])
            q = f"${n}^{e}$"
            ans = str(n ** e)
            return q, ans, "int"
        elif t == "root":
            n = random.randint(2, 15)
            q = f"$\\sqrt{{{n*n}}}$"
            ans = str(n)
            return q, ans, "int"
        elif t == "pythag":
            triples = [(3, 4, 5), (5, 12, 13), (6, 8, 10)]
            a, b, c = random.choice(triples)
            side = random.choice(["c", "a", "b"])
            if side == "c":
                q = f"Troj√∫heln√≠k m√° odvƒõsny a={a}, b={b}. Vypoƒç√≠tej p≈ôeponu c."
                ans = str(c)
            elif side == "a":
                q = f"Troj√∫heln√≠k m√° p≈ôeponu c={c} a odvƒõsnu b={b}. Vypoƒç√≠tej odvƒõsnu a."
                ans = str(a)
            else:
                q = f"Troj√∫heln√≠k m√° p≈ôeponu c={c} a odvƒõsnu a={a}. Vypoƒç√≠tej odvƒõsnu b."
                ans = str(b)
            return q, ans, "int"
        else:
            r = random.randint(3, 15)
            which = random.choice(["circumference", "area"])
            if which == "circumference":
                q = f"Vypoƒç√≠tej obvod kruhu s polomƒõrem r={r}. Pou≈æij $\\pi \\approx 3.14$ a 2 dp."
                ans = f"{round(2 * 3.14 * r, 2):.2f}"
            else:
                q = f"Vypoƒç√≠tej obsah kruhu s polomƒõrem r={r}. Pou≈æij $\\pi \\approx 3.14$ a 2 dp."
                ans = f"{round(3.14 * r * r, 2):.2f}"
            return q, ans, "decimal_2dp"

    elif lvl == "9. t≈ô√≠da":
        t = random.choice(["linear_paren", "quadratic_simple", "statistics", "percent_reverse", "financial"])
        if t == "linear_paren":
            a = random.randint(2, 5)
            x_val = random.randint(-10, 10)
            b = random.randint(-5, 5)
            c = a * (x_val + b)
            q = f"Vy≈ôe≈° rovnici: ${a}(x + {b}) = {c}$, najdi $x$."
            ans = str(x_val)
            return q, ans, "int"
        elif t == "quadratic_simple":
            squares = [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 196]
            A = random.choice(squares)
            r = int(math.sqrt(A))
            q = f"Vy≈ôe≈° rovnici: $x^2 = {A}$. (Staƒç√≠ zadat jednu spr√°vnou hodnotu.)"
            return q, (str(r), str(-r)), "quadratic_one_of_two"
        elif t == "statistics":
            nums = sorted([random.randint(1, 40) for _ in range(random.randint(5, 7))])
            if random.random() < 0.5:
                q = "Vypoƒç√≠tej pr≈Ømƒõr ƒç√≠sel: " + ", ".join(map(str, nums)) + " (na 2 desetinn√° m√≠sta)."
                ans = f"{round(sum(nums) / len(nums), 2):.2f}"
                return q, ans, "decimal_2dp"
            else:
                n = len(nums)
                med = nums[n // 2] if n % 2 == 1 else (nums[n // 2 - 1] + nums[n // 2]) / 2
                q = "Urƒçi medi√°n ƒç√≠sel: " + ", ".join(map(str, nums)) + "."
                ans = f"{med:.2f}" if isinstance(med, float) else str(med)
                return q, ans, "decimal_or_int"
        elif t == "percent_reverse":
            p = random.choice([10, 15, 20, 25, 30, 40, 50])
            T = random.choice([110, 150, 200, 250, 300, 400, 500, 800, 1000])
            q = f"Po zdra≈æen√≠ o {p}% stoj√≠ zbo≈æ√≠ {T} Kƒç. Kolik st√°lo p≈Øvodnƒõ? (na 2 dp)"
            ans = f"{round(T / (1 + p / 100), 2):.2f}"
            return q, ans, "decimal_2dp"
        else:
            principal = random.randint(1000, 20000)
            rate = random.choice([1, 1.5, 2, 2.5, 3, 4, 5])
            years = random.randint(1, 5)
            q = f"Jak√Ω √∫rok z√≠sk√°≈° z {principal} Kƒç p≈ôi roƒçn√≠ sazbƒõ {rate}% za {years} roky? (ƒçist√© ƒç√≠slo, 2 dp)"
            ans = f"{round(principal * (rate / 100) * years, 2):.2f}"
            return q, ans, "decimal_2dp_number_only"

    a = random.randint(1, 50)
    b = random.randint(1, 50)
    q = f"${a} + {b}$"
    ans = str(a + b)
    return q, ans, "int"

# -----------------------
# Streamlit UI
# -----------------------
st.set_page_config(page_title="Poh√°dky: MA / ƒåJ / IT (Python)", layout="wide")
st.title("üåü Poh√°dky s matematikou, ƒçe≈°tinou a informatikou (Python)")

# Session state init
defaults = dict(
    game_started=False, tasks_solved_for_reveal=0, score=0, best_score=0,
    best_time=float('inf'), start_time=None, end_time=None, current_task=None,
    last_selected_fairytale=None, last_selected_class=None, last_selected_subject=None,
    revealed_tiles=[False]*20, tile_coords=[], feedback_message="", feedback_type="",
    final_report=None, history=[], show_full_fairytale=False, achievement_date=None,
    diploma_image_path=None, _cjl_index=0, _it_index=0, _it_last_output="",
    _it_last_eval="", current_cjl_task=None
)
for k,v in defaults.items():
    if k not in st.session_state: st.session_state[k]=v

TASKS_TO_REVEAL = 20
class_to_db_level = {f"{i}. t≈ô√≠da": f"{i}. t≈ô√≠da" for i in range(1,10)}

# Sidebar
st.sidebar.title("üìö V√Ωbƒõr poh√°dky")
fairytale_titles = list(fairytales_data.keys())
vyber = st.sidebar.selectbox("Vyberte poh√°dku", fairytale_titles)
tridy = [f"{i}. t≈ô√≠da" for i in range(1,10)]
vyber_tridy = st.sidebar.selectbox("Vyberte √∫rove≈à", tridy)
st.sidebar.markdown("---")
subject = st.sidebar.radio("P≈ôedmƒõt", options=["MA","ƒåJ","IT"], index=0, horizontal=True)

# ƒåJ ‚Äì naƒçten√≠ statick√Ωch √∫loh
cjl_tasks_by_level = {}
for pth in ["cjl_tasks.json", "/mnt/data/cjl_tasks.json"]:
    if os.path.exists(pth):
        with open(pth, "r", encoding="utf-8") as f:
            cjl_tasks_by_level = json.load(f)
        break

def get_tile_coordinates(image_path, rows, cols):
    if not image_path or not os.path.exists(image_path): return []
    img = _PILImage.open(image_path); w,h = img.size; tw,th = w//cols, h//rows
    coords=[]
    for r in range(rows):
        for c in range(cols):
            coords.append((c*tw, r*th, (c+1)*tw, (r+1)*th))
    return coords

def generate_diploma_pdf(username, score, time_s, fairytale_title,
                         achievement_date, level, subject_display,
                         topic_line, image_path,
                         crop_mode="auto"):
    pdf = FPDF(orientation='L', unit='mm', format='A4'); pdf.add_page()
    pw, ph = pdf.w, pdf.h
    try:
        pdf.add_font("DejaVuSans","", "DejaVuSansCondensed.ttf", uni=True)
        pdf.add_font("DejaVuSans","B","DejaVuSansCondensed.ttf", uni=True)
    except RuntimeError:
        pdf.set_font("Arial","",24)

    if image_path and os.path.exists(image_path):
        original_img = _PILImage.open(image_path)
        iw, ih = original_img.size

        # --- CROP (top half) -------------------------------------------
        # 1) Zapni buƒè per‚Äëpoh√°dka (nap≈ô. jen Zlatovl√°ska),
        #    nebo parametricky p≈ôes crop_mode="top-half".
        crop_top = (
        crop_mode == "top-half"
        or (crop_mode == "auto" and fairytale_title in {"O Zlatovl√°sce", "O jednoro≈æci a dr√°ƒçkovi"})
        )
        if crop_top:
            original_img = original_img.crop((0, 0, iw, ih // 2))
            iw, ih = original_img.size
        # ---------------------------------------------------------------

        # Polopr≈Øhledn√© pozad√≠ jako d≈ô√≠v
        img_rgba = original_img.convert("RGBA")
        bg = _PILImage.new("RGBA", img_rgba.size, (255, 255, 255, 255))
        img_rgba.putalpha(128)
        final_bg = _PILImage.alpha_composite(bg, img_rgba)

        buf = io.BytesIO()
        final_bg.convert("RGB").save(buf, format="JPEG")
        buf.seek(0)

        # Zvƒõt≈°en√≠ na str√°nku se zachov√°n√≠m pomƒõru stran
        ar = iw / ih
        if pw / ph > ar:
            bw, bh = pw, pw / ar
        else:
            bh, bw = ph, ph * ar

        # Centrovat; pro top‚Äëhalf vƒõt≈°inou vypad√° l√≠p zarovn√°n√≠ k horn√≠mu okraji
        if crop_top:
            x = (pw - bw) / 2
            y = 0  # p≈ôiklepnout nahoru
        else:
            x = (pw - bw) / 2
            y = (ph - bh) / 2

        pdf.image(buf, x=x, y=y, w=bw, h=bh)

    # ... (zbytek diplomu beze zmƒõny)
    pdf.set_font("DejaVuSans","",36); pdf.set_xy(10,30); pdf.cell(0,10,'Diplom',0,1,'C')
    pdf.set_font("DejaVuSans","",18); pdf.set_xy(10,50)
    pdf.cell(0,10, f'Tento diplom z√≠sk√°v√° za skvƒõl√Ω v√Ωkon ve h≈ôe Poh√°dky s {subject_display}', 0, 1, 'C')
    pdf.set_font("DejaVuSans","B",48); pdf.set_xy(10,90); pdf.cell(0,10,username,0,1,'C')
    pdf.set_font("DejaVuSans","",16); pdf.set_xy(10,120)
    pdf.cell(0,10,f'za √∫spƒõ≈°n√© vy≈ôe≈°en√≠ {score} √∫kol≈Ø v poh√°dce "{fairytale_title}"', 0, 1, 'C')
    pdf.set_xy(10,130); pdf.cell(0,10,f'v ƒçase {time_s:.2f} s.', 0, 1, 'C')
    pdf.set_font("DejaVuSans","",12)
    pdf.set_xy(10,160); pdf.cell(0,10,f'Datum a ƒças: {datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}',0,1,'C')
    pdf.set_xy(10,170); pdf.cell(0,10,f'√örove≈à: {level}',0,1,'C')
    pdf.set_xy(10,180); pdf.cell(0,10,f'T√©ma: {topic_line}',0,1,'C')
    return bytes(pdf.output(dest='S'))

# --- Hlavn√≠ obsah ---
if vyber:
    data = fairytales_data[vyber]
    text, moral, img_path_data = data["text"], data["moral"], data["obrazek_path"]
    base, _ = os.path.splitext(img_path_data); image_path=None
    if os.path.exists(os.path.join("obrazky", f"{base}.png")): image_path=os.path.join("obrazky", f"{base}.png")
    elif os.path.exists(os.path.join("obrazky", f"{base}.jpg")): image_path=os.path.join("obrazky", f"{base}.jpg")
    st.session_state.diploma_image_path = image_path

    # reset p≈ôi zmƒõnƒõ voleb
    if (st.session_state.last_selected_fairytale != vyber
        or st.session_state.last_selected_class != vyber_tridy
        or st.session_state.last_selected_subject != subject):
        st.session_state.current_task = None
        st.session_state.last_selected_fairytale = vyber
        st.session_state.last_selected_class = vyber_tridy
        st.session_state.last_selected_subject = subject
        st.session_state.feedback_message = ""
        st.session_state.feedback_type = ""
        st.session_state.tasks_solved_for_reveal = 0
        st.session_state.start_time = None
        st.session_state.end_time = None
        st.session_state.final_report = None
        st.session_state.history = []
        st.session_state.game_started = False
        st.session_state.revealed_tiles = [False]*20
        st.session_state.tile_coords = get_tile_coordinates(image_path, 4, 5)
        st.session_state.show_full_fairytale = False
        st.session_state.best_score = 0
        st.session_state.best_time = float('inf')
        st.session_state._cjl_index = 0
        st.session_state._it_index = 0
        st.session_state._it_last_output = ""
        st.session_state._it_last_eval = ""
        st.session_state.current_cjl_task = None
        st.rerun()

    st.title(f"üßô {vyber}")
    if st.session_state.show_full_fairytale:
        st.markdown(text)
        if st.button("Skr√Ωt celou poh√°dku"): st.session_state.show_full_fairytale=False; st.rerun()
    else:
        prev = text[:300] + ("‚Ä¶" if len(text)>300 else "")
        st.markdown(prev)
        if st.button("Zobrazit celou poh√°dku"): st.session_state.show_full_fairytale=True; st.rerun()

    st.divider()
    col_left, col_right = st.columns([1,1])

    with col_left:
        st.markdown("### üìò T√©ma")
        db_level = class_to_db_level.get(vyber_tridy, "Z≈†")
        if subject == "MA":
            pozn_list = math_notes_by_level.get(db_level, ["≈Ω√°dn√° pozn√°mka."])
        elif subject == "ƒåJ":
            pozn_list = cjl_notes_by_level.get(db_level, ["≈Ω√°dn√° pozn√°mka."])
        else:
            pozn_list = it_notes_by_level.get(db_level, ["≈Ω√°dn√° pozn√°mka."])

        if pozn_list:
            with st.expander("üìö Zobrazit"):
                for p in pozn_list:
                    st.markdown(f"- {p}")

        st.subheader("üß© √ökoly")

        def start_new_game():
            st.session_state.start_time = time.time()
            st.session_state.tasks_solved_for_reveal = 0
            st.session_state.score = 0
            st.session_state.history = []
            st.session_state.feedback_message = ""
            st.session_state.feedback_type = ""
            st.session_state.game_started = True
            st.session_state.revealed_tiles = [False]*20
            st.session_state.tile_coords = get_tile_coordinates(image_path, 4, 5)
            st.session_state.current_task = None
            st.session_state.final_report = None
            st.session_state.achievement_date = None
            st.session_state.end_time = None
            st.session_state._cjl_index = 0
            st.session_state._it_index = 0
            st.session_state._it_last_output = ""
            st.session_state._it_last_eval = ""
            st.session_state.current_cjl_task = None
            st.rerun()

        if not st.session_state.game_started:
            st.info(f"Vy≈ôe≈°te {TASKS_TO_REVEAL} √∫kol≈Ø a odhalte obr√°zek!")
            if st.button("Zaƒç√≠t novou hru", key="start_new_game_initial"):
                start_new_game()
        else:
            if st.session_state.tasks_solved_for_reveal < TASKS_TO_REVEAL:

                # ---------------- MA ----------------
                if subject == "MA":
                    if st.session_state.current_task is None:
                        st.session_state.current_task = generate_math_problem(vyber_tridy)
                    question, correct_answer, problem_type = st.session_state.current_task

                    format_hint = ""
                    if problem_type == "div_remainder":
                        format_hint = "Form√°t: `pod√≠l zb. zbytek` (nap≈ô. `5 zb. 2`)."
                    elif problem_type in ["decimal_2dp", "decimal_2dp_number_only", "decimal_or_int"]:
                        format_hint = "Zapi≈° na 2 desetinn√° m√≠sta. Teƒçka i ƒç√°rka jsou povoleny."
                        if problem_type.endswith("number_only"):
                            format_hint += " Zadej ƒçist√© ƒç√≠slo (bez jednotky)."
                    elif problem_type == "fraction_reduced":
                        format_hint = "Zlomky zapisuj ve zkr√°cen√©m tvaru `ƒçitatel/jmenovatel` (nap≈ô. `3/4`)."
                    elif problem_type == "ratio":
                        format_hint = "Pomƒõr zapisuj jako `a : b` ve zkr√°cen√©m tvaru."
                    elif problem_type == "quadratic_one_of_two":
                        format_hint = "Staƒç√≠ zadat jednu z hodnot, kter√© rovnici vyhovuj√≠."

                    with st.container():
                        c1,c2 = st.columns([4,1])
                        with c1:
                            st.markdown(f"##### ‚úèÔ∏è {question}")
                            if format_hint: st.caption("üí° " + format_hint)
                        with c2:
                            st.markdown(f"üèÖ **Sk√≥re:** {st.session_state.tasks_solved_for_reveal}/{TASKS_TO_REVEAL}")

                        with st.form("math_form", clear_on_submit=True):
                            a1,a2 = st.columns([3,1])
                            with a1:
                                ans = st.text_input("Tvoje odpovƒõƒè:", key="math_answer_input", label_visibility="collapsed", placeholder="Sem napi≈° svou odpovƒõƒè‚Ä¶")
                            with a2:
                                ok = st.form_submit_button("Odeslat")

                    if st.session_state.feedback_message:
                        (st.success if st.session_state.feedback_type=="success" else st.error)(st.session_state.feedback_message)

                    if 'ok' in locals() and ok:
                        is_correct = False
                        user_disp = ans
                        corr_disp = correct_answer if not isinstance(correct_answer, tuple) else " nebo ".join(correct_answer)
                        try:
                            if problem_type == "int":
                                val = int(ans.replace(" ", ""))
                                is_correct = (str(val) == str(correct_answer))
                            elif problem_type == "div_remainder":
                                uq, ur = parse_div_remainder(ans)
                                cq, cr = parse_div_remainder(correct_answer)
                                is_correct = (uq == cq and ur == cr)
                            elif problem_type in ["decimal_2dp","decimal_2dp_number_only","decimal_or_int"]:
                                u = normalize_decimal(ans); c = float(str(correct_answer).replace(",", "."))
                                is_correct = approx_equal(u, c, 1e-2)
                            elif problem_type == "fraction_reduced":
                                is_correct = fraction_equal_reduced(ans, correct_answer)
                            elif problem_type == "ratio":
                                ua, ub = parse_ratio(ans); ca, cb = parse_ratio(correct_answer)
                                is_correct = (ua == ca and ub == cb)
                            elif problem_type == "quadratic_one_of_two":
                                try:
                                    v = int(float(ans.replace(",", ".").strip()))
                                    is_correct = (str(v) in set(correct_answer))
                                except:
                                    is_correct = (ans.strip() in set(correct_answer))
                            else:
                                try:
                                    u = normalize_decimal(ans); c = normalize_decimal(str(correct_answer))
                                    is_correct = approx_equal(u, c, 1e-2)
                                except:
                                    is_correct = (str(ans).strip() == str(correct_answer).strip())
                        except Exception:
                            is_correct = False

                        if is_correct:
                            st.session_state.feedback_message = "Spr√°vnƒõ! üéâ"; st.session_state.feedback_type="success"
                            st.session_state.tasks_solved_for_reveal += 1
                            st.session_state.history.append((question, user_disp, corr_disp, "‚úÖ spr√°vnƒõ"))
                            unrevealed = [i for i,r in enumerate(st.session_state.revealed_tiles) if not r]
                            if unrevealed: st.session_state.revealed_tiles[random.choice(unrevealed)] = True
                        else:
                            st.session_state.feedback_message = f"Nespr√°vnƒõ. ‚ùå Spr√°vn√° odpovƒõƒè: {corr_disp}"; st.session_state.feedback_type="error"
                            st.session_state.history.append((question, user_disp, corr_disp, "‚ùå ≈°patnƒõ"))

                        st.session_state.current_task = None
                        st.rerun()

                # ---------------- ƒåJ ----------------
                elif subject == "ƒåJ":
                    level_tasks = cjl_tasks_by_level.get(vyber_tridy, {}).get("rounds", [])
                    flat = [t for rnd in level_tasks for t in rnd]

                    if not flat:
                        st.warning("Pro tuto t≈ô√≠du zat√≠m nejsou ƒåJ √∫lohy.")
                    else:
                        # Udr≈æ n√°hodnou ot√°zku do odesl√°n√≠
                        if st.session_state.current_cjl_task is None:
                            st.session_state.current_cjl_task = random.choice(flat)
                        task = st.session_state.current_cjl_task

                        with st.form("cjl_form", clear_on_submit=False):
                            c1, c2 = st.columns([4,1])
                            with c1:
                                st.markdown(f"##### ‚úèÔ∏è {task['text']}")
                            with c2:
                                st.markdown(f"üèÖ **Sk√≥re:** {st.session_state.tasks_solved_for_reveal}/{TASKS_TO_REVEAL}")

                            choice = st.radio(
                                "Vyber odpovƒõƒè:",
                                options=["a","b","c"],
                                index=None,
                                format_func=lambda x: task["options"][ord(x)-97],
                                key=f"cjl_choice_{hash(task['text']) % (10**8)}"
                            )
                            ok_cjl = st.form_submit_button("Odeslat")

                        # ENTER -> klikne na tlaƒç√≠tko "Odeslat"
                        st.markdown("""
                        <script>
                        (function(){
                          const root = window.parent.document;
                          function findSubmit(){
                            const btns = Array.from(root.querySelectorAll('button'));
                            return btns.find(b => b.innerText.trim() === 'Odeslat');
                          }
                          function handler(e){
                            if (e.key === 'Enter') {
                              const btn = findSubmit();
                              if (btn) btn.click();
                            }
                          }
                          root.addEventListener('keydown', handler);
                        })();
                        </script>
                        """, unsafe_allow_html=True)

                        if st.session_state.feedback_message:
                            (st.success if st.session_state.feedback_type=="success" else st.error)(st.session_state.feedback_message)

                        if ok_cjl:
                            if choice is None:
                                st.warning("Ne≈æ ode≈°le≈°, nejd≈ô√≠v pros√≠m vyber jednu z mo≈ænost√≠.")
                            else:
                                corr = task["correct_option"]
                                if choice == corr:
                                    st.session_state.feedback_message = "Spr√°vnƒõ! üéâ"
                                    st.session_state.feedback_type = "success"
                                    st.session_state.tasks_solved_for_reveal += 1
                                    st.session_state.history.append(
                                        (task["text"],
                                         f"({choice}) {task['options'][ord(choice)-97]}",
                                         f"({corr}) {task['options'][ord(corr)-97]}",
                                         "‚úÖ spr√°vnƒõ")
                                    )
                                    unrevealed = [i for i,r in enumerate(st.session_state.revealed_tiles) if not r]
                                    if unrevealed:
                                        st.session_state.revealed_tiles[random.choice(unrevealed)] = True
                                else:
                                    st.session_state.feedback_message = f"Nespr√°vnƒõ. ‚ùå Spr√°vn√° odpovƒõƒè byla: ({corr}) {task['options'][ord(corr)-97]}"
                                    st.session_state.feedback_type = "error"
                                    st.session_state.history.append(
                                        (task["text"],
                                         f"({choice}) {task['options'][ord(choice)-97]}",
                                         f"({corr}) {task['options'][ord(corr)-97]}",
                                         "‚ùå ≈°patnƒõ")
                                    )

                                # vyber novou n√°hodnou ot√°zku p≈ô√≠≈°tƒõ
                                st.session_state.current_cjl_task = None
                                st.rerun()

                # ---------------- IT ----------------
                else:
                    tasks = it_tasks_by_level.get(vyber_tridy, [])
                    if not tasks:
                        st.warning("Pro tuto t≈ô√≠du zat√≠m nejsou IT √∫lohy.")
                    else:
                        idx = st.session_state._it_index % len(tasks)
                        task = tasks[idx]
                        st.markdown(f"##### üíª {task['prompt']}")

                        code_key = f"it_code_{idx}"
                        code = st.text_area(
                            "Tv≈Øj Python k√≥d:",
                            value=st.session_state.get(code_key, task.get("starter","")),
                            height=160,
                            key=code_key,
                            placeholder="Sem napi≈° sv≈Øj k√≥d‚Ä¶"
                        )

                        # ≈ò√°dek 1: Spustit k√≥d + okno s v√Ωstupem
                        c_run_out = st.columns([1,3])
                        run = c_run_out[0].button("Spustit k√≥d")
                        if run:
                            ok_run, out = run_user_code_capture_stdout(code)
                            st.session_state._it_last_output = out if ok_run else out
                        with c_run_out[1]:
                            st.caption("V√Ωstup programu:")
                            st.code(st.session_state._it_last_output or "(≈æ√°dn√Ω v√Ωstup)")

                        # ≈ò√°dek 2: Vyhodnotit + hodnocen√≠
                        c_eval = st.columns([1,3])
                        eval_btn = c_eval[0].button("Vyhodnotit")
                        if eval_btn:
                            ok_run, out = run_user_code_capture_stdout(code)
                            st.session_state._it_last_output = out if ok_run else out
                            expected = task["expected_stdout"].strip()
                            if not ok_run:
                                st.session_state._it_last_eval = f"Chyba bƒõhu: {out}"
                                st.session_state.feedback_message = out
                                st.session_state.feedback_type = "error"
                                st.session_state.history.append((task["prompt"], out, expected, "‚ùå chyba bƒõhu"))
                            else:
                                if out.strip() == expected:
                                    st.session_state._it_last_eval = "Spr√°vnƒõ! üéâ"
                                    st.session_state.feedback_message = "Spr√°vnƒõ! üéâ"
                                    st.session_state.feedback_type = "success"
                                    st.session_state.tasks_solved_for_reveal += 1
                                    st.session_state.history.append((task["prompt"], out, expected, "‚úÖ spr√°vnƒõ"))
                                    st.session_state._it_index += 1
                                    unrevealed = [i for i,r in enumerate(st.session_state.revealed_tiles) if not r]
                                    if unrevealed: st.session_state.revealed_tiles[random.choice(unrevealed)] = True
                                else:
                                    st.session_state._it_last_eval = f"Nespr√°vnƒõ. Oƒçek√°v√°no: `{expected}`; tv≈Øj v√Ωstup: `{out}`"
                                    st.session_state.feedback_message = f"Nespr√°vnƒõ. ‚ùå Oƒçek√°v√°no: `{expected}`; tv≈Øj v√Ωstup: `{out}`"
                                    st.session_state.feedback_type = "error"
                                    st.session_state.history.append((task["prompt"], out, expected, "‚ùå ≈°patnƒõ"))
                            st.rerun()

                        with c_eval[1]:
                            st.caption("Hodnocen√≠:")
                            if st.session_state._it_last_eval:
                                if "Spr√°vnƒõ" in st.session_state._it_last_eval:
                                    st.success(st.session_state._it_last_eval)
                                elif "Chyba" in st.session_state._it_last_eval:
                                    st.error(st.session_state._it_last_eval)
                                else:
                                    st.error(st.session_state._it_last_eval)
                            else:
                                st.info("Zat√≠m nevyhodnoceno.")

                        st.markdown(f"üèÖ **Sk√≥re:** {st.session_state.tasks_solved_for_reveal}/{TASKS_TO_REVEAL}")

            else:
                st.snow()
                if st.session_state.end_time is None:
                    st.session_state.end_time = time.time()
                    st.session_state.achievement_date = datetime.datetime.now()
                    total = st.session_state.end_time - st.session_state.start_time
                    correct = sum(1 for *_ , status in st.session_state.history if status=="‚úÖ spr√°vnƒõ")
                    incorrect = len(st.session_state.history) - correct
                    is_best=False
                    if correct > st.session_state.best_score: st.session_state.best_score=correct; is_best=True
                    if total < st.session_state.best_time: st.session_state.best_time=total; is_best=True
                    report = f"#### ‚ú® Skvƒõle!\n- Spr√°vnƒõ: **{correct}**\n- Nespr√°vnƒõ: **{incorrect}**\n- ƒåas (20 √∫kol≈Ø): **{total:.2f}** s\n"
                    if is_best: report += "\n**üèÜ Nov√Ω osobn√≠ rekord!**"
                    st.session_state.final_report = report
                    st.session_state.score = st.session_state.tasks_solved_for_reveal
                st.success("Vy≈ôe≈°il/a jsi v≈°ech 20 √∫kol≈Ø!")

        # Historie (v≈°echny p≈ôedmƒõty)
        if st.checkbox("üìú Zobrazit historii odpovƒõd√≠", key="show_history"):
            st.markdown("---"); st.subheader("Historie ≈ôe≈°en√≠")
            if not st.session_state.history:
                st.info("Zat√≠m ≈æ√°dn√© odpovƒõdi.")
            else:
                for i, item in enumerate(reversed(st.session_state.history), 1):
                    q, a_user, a_correct, status = item
                    st.markdown(f"{i}. **{q}** ‚Üí tvoje: `{a_user}` | spr√°vnƒõ: `{a_correct}` ‚Äî {status}")

        if st.session_state.final_report:
            st.subheader("üèÜ V√Ωsledkov√° listina")
            st.info(st.session_state.final_report)
            st.subheader("üìú Vytvo≈ôit diplom")
            st.markdown(f"Nejlep≈°√≠ v√Ωsledek v ‚Äû{vyber}‚Äú ({vyber_tridy}): **{st.session_state.best_score}** √∫kol≈Ø v **{st.session_state.best_time:.2f} s**.")
            diploma_name = st.text_input("Jm√©no na diplom:", value="")

            if diploma_name and st.session_state.best_score>0 and st.session_state.achievement_date:
                if subject=="MA":
                    subject_display = "Matematikou"
                    notes = math_notes_by_level.get(db_level, ["T√©ma nen√≠ k dispozici."])
                elif subject=="ƒåJ":
                    subject_display = "ƒåe≈°tinou"
                    notes = cjl_notes_by_level.get(db_level, ["T√©ma nen√≠ k dispozici."])
                else:
                    subject_display = "Informatikou (Python)"
                    notes = it_notes_by_level.get(db_level, ["T√©ma nen√≠ k dispozici."])
                topic_line = notes[0] if notes else "T√©ma nen√≠ k dispozici."

                pdf = generate_diploma_pdf(
                    username=diploma_name,
                    score=st.session_state.best_score,
                    time_s=st.session_state.best_time,
                    fairytale_title=vyber,
                    achievement_date=st.session_state.achievement_date,
                    level=vyber_tridy,
                    subject_display=subject_display,
                    topic_line=topic_line,
                    image_path=st.session_state.diploma_image_path
                )
                if pdf:
                    st.download_button("St√°hnout diplom PDF", data=pdf, file_name=f"diplom_{diploma_name}.pdf", mime="application/pdf")

        if st.session_state.game_started and st.session_state.tasks_solved_for_reveal>=TASKS_TO_REVEAL:
            if st.button("Zaƒç√≠t novou hru", key="restart_game_final"):
                st.session_state.game_started=False
                st.rerun()

    with col_right:
        st.subheader("üñºÔ∏è Obr√°zek")
        image_path = st.session_state.diploma_image_path
        if image_path and os.path.exists(image_path):
            if st.session_state.tasks_solved_for_reveal>=TASKS_TO_REVEAL:
                st.image(image_path, use_container_width=True, caption=f"Gratuluji, obr√°zek je kompletn√≠! ({st.session_state.tasks_solved_for_reveal}/{TASKS_TO_REVEAL})")
            else:
                img = _PILImage.open(image_path); draw = ImageDraw.Draw(img)
                if not st.session_state.game_started:
                    tiles = range(TASKS_TO_REVEAL); caption="Zaƒçnƒõte novou hru a odhalte obr√°zek!"
                else:
                    tiles = [i for i,r in enumerate(st.session_state.revealed_tiles) if not r]
                    caption=f"Odhalen√Ωch {st.session_state.tasks_solved_for_reveal}/{TASKS_TO_REVEAL} pol√≠ƒçek"
                if st.session_state.tile_coords:
                    for i in tiles:
                        if i < len(st.session_state.tile_coords):
                            coords = st.session_state.tile_coords[i]
                            draw.rectangle(coords, fill="black")
                buf = io.BytesIO(); img.save(buf, format="PNG")
                st.image(buf, use_container_width=True, caption=caption)
        else:
            st.warning("Obr√°zek k zobrazen√≠ nebyl nalezen.")

    st.divider()
    st.subheader("‚≠ê Mravn√≠ ponauƒçen√≠")
    if moral: st.info(moral)
    else: st.warning("Ponauƒçen√≠ nen√≠ zad√°no.")
else:
    st.warning("Nebyla vybr√°na ≈æ√°dn√° poh√°dka.")


